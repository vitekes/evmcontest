import { buildModule } from "@nomicfoundation/hardhat-ignition/modules";
import CoreModule from "./CoreModule";

const PublicDeploy = buildModule("PublicDeploy", (m) => {
  console.log("üåê –ü—É–±–ª–∏—á–Ω—ã–π –¥–µ–ø–ª–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∫–æ–Ω–∫—É—Ä—Å–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏...");

  // =============================================
  // –ü–û–õ–£–ß–ï–ù–ò–ï –ü–ê–†–ê–ú–ï–¢–†–û–í –î–õ–Ø –ü–£–ë–õ–ò–ß–ù–´–• –°–ï–¢–ï–ô
  // =============================================
  
  // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –¥–µ–ø–ª–æ—è
  const treasuryAddress = m.getParameter("treasuryAddress");
  const platformFeePercentage = m.getParameter("platformFeePercentage", 500); // 5% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  
  // –ê–¥—Ä–µ—Å–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï)
  const wethAddress = m.getParameter("wethAddress");
  const usdcAddress = m.getParameter("usdcAddress");
  const usdtAddress = m.getParameter("usdtAddress");
  
  // Chainlink price feeds (—Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏ –¥–ª—è Ethereum mainnet)
  const wethPriceFeed = m.getParameter("wethPriceFeed", "0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419");
  const usdcPriceFeed = m.getParameter("usdcPriceFeed", "0x8fFfFfd4AfB6115b954Bd326cbe7B4BA576818f6");
  const usdtPriceFeed = m.getParameter("usdtPriceFeed", "0x3E7d1eAB13ad0104d2750B8863b489D65364e32D");

  console.log(`üåê –ü—É–±–ª–∏—á–Ω—ã–π –¥–µ–ø–ª–æ–π`);
  console.log(`üí∞ Treasury: ${treasuryAddress}`);
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —á–∏—Å–ª—É –¥–ª—è –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∏
  console.log(`üí∏ –ö–æ–º–∏—Å—Å–∏—è: ${platformFeePercentage} bp (${Number(platformFeePercentage)/100}%)`);
  console.log(`ü™ô WETH: ${wethAddress}`);
  console.log(`ü™ô USDC: ${usdcAddress}`);
  console.log(`ü™ô USDT: ${usdtAddress}`);

  // =============================================
  // –î–ï–ü–õ–û–ô –û–°–ù–û–í–ù–´–• –ö–û–ù–¢–†–ê–ö–¢–û–í
  // =============================================
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º CoreModule –∫–∞–∫ –µ—Å—Ç—å
  const coreModule = m.useModule(CoreModule);
  
  // =============================================
  // –ù–ê–°–¢–†–û–ô–ö–ê –†–ï–ê–õ–¨–ù–´–• –¢–û–ö–ï–ù–û–í
  // =============================================
  
  console.log("ü™ô –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ TokenValidator...");

  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ whitelist
  m.call(coreModule.tokenValidator, "setTokenWhitelisted", [wethAddress, true], {
    id: "whitelist_weth"
  });

  m.call(coreModule.tokenValidator, "setTokenWhitelisted", [usdcAddress, true], {
    id: "whitelist_usdc"
  });

  m.call(coreModule.tokenValidator, "setTokenWhitelisted", [usdtAddress, true], {
    id: "whitelist_usdt"
  });

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Chainlink price feeds
  m.call(coreModule.tokenValidator, "setPriceFeed", [wethAddress, wethPriceFeed], {
    id: "set_weth_price_feed"
  });

  m.call(coreModule.tokenValidator, "setPriceFeed", [usdcAddress, usdcPriceFeed], {
    id: "set_usdc_price_feed"
  });

  m.call(coreModule.tokenValidator, "setPriceFeed", [usdtAddress, usdtPriceFeed], {
    id: "set_usdt_price_feed"
  });

  // =============================================
  // –ü–†–û–î–ê–ö–®–ù –ù–ê–°–¢–†–û–ô–ö–ò –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–• –°–£–ú–ú
  // =============================================
  
  // WETH: –º–∏–Ω–∏–º—É–º 0.01 ETH (–ø—Ä–æ–¥–∞–∫—à–Ω –∑–Ω–∞—á–µ–Ω–∏–µ)
  m.call(coreModule.tokenValidator, "setMinimumPrizeAmount", [wethAddress, "10000000000000000"], {
    id: "set_weth_minimum"
  });

  // USDC: –º–∏–Ω–∏–º—É–º $50 (–ø—Ä–æ–¥–∞–∫—à–Ω –∑–Ω–∞—á–µ–Ω–∏–µ)
  m.call(coreModule.tokenValidator, "setMinimumPrizeAmount", [usdcAddress, "50000000"], {
    id: "set_usdc_minimum"
  });

  // USDT: –º–∏–Ω–∏–º—É–º $50 (–ø—Ä–æ–¥–∞–∫—à–Ω –∑–Ω–∞—á–µ–Ω–∏–µ)
  m.call(coreModule.tokenValidator, "setMinimumPrizeAmount", [usdtAddress, "50000000"], {
    id: "set_usdt_minimum"
  });

  // =============================================
  // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–î–ê–ö–®–ù –ù–ê–°–¢–†–û–ô–ö–ò
  // =============================================
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è testnets –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è gas costs
  m.call(coreModule.networkFeeManager, "setNetworkFee", [11155111, 200], { // 2% –¥–ª—è Sepolia
    id: "set_sepolia_fee_override"
  });

  m.call(coreModule.networkFeeManager, "setNetworkFee", [5, 300], { // 3% –¥–ª—è Goerli
    id: "set_goerli_fee"
  });

  // =============================================
  // –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ü–ï–†–ï–î–ê–ß–ê OWNERSHIP
  // =============================================
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const multisigAddress = m.getParameter("multisigAddress", "");
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
  const shouldUseMultisig = m.getParameter("useMultisig", false);
  
  // –£—Å–ª–æ–≤–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ ownership, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω multisig
  if (shouldUseMultisig) {
    // –ü–µ—Ä–µ–¥–∞–µ–º ownership –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    m.call(coreModule.networkFeeManager, "transferOwnership", [multisigAddress], {
      id: "transfer_fee_manager_ownership"
    });

    m.call(coreModule.tokenValidator, "transferOwnership", [multisigAddress], {
      id: "transfer_token_validator_ownership"
    });

    m.call(coreModule.prizeManager, "transferOwnership", [multisigAddress], {
      id: "transfer_prize_manager_ownership"
    });
    
    console.log("üîí Ownership –ø–µ—Ä–µ–¥–∞–Ω multisig –∫–æ—à–µ–ª—å–∫—É");
  } else {
    console.log("‚ö†Ô∏è Ownership –æ—Å—Ç–∞–ª—Å—è —É –¥–µ–ø–ª–æ–π–µ—Ä–∞");
  }

  console.log("üéâ –ü—É–±–ª–∏—á–Ω—ã–π –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!");
  console.log("üåê –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é");

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ ContractFuture –æ–±—ä–µ–∫—Ç—ã
  return {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    contestFactory: coreModule.contestFactory,
    prizeTemplates: coreModule.prizeTemplates,
    tokenValidator: coreModule.tokenValidator,
    networkFeeManager: coreModule.networkFeeManager,
    prizeManager: coreModule.prizeManager,
    creatorBadges: coreModule.creatorBadges
  };
});

export default PublicDeploy;