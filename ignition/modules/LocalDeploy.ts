import { buildModule } from "@nomicfoundation/hardhat-ignition/modules";
import CoreModule from "./CoreModule";
import MockModule from "./MockModule";

const LocalDeploy = buildModule("LocalDeploy", (m) => {
  console.log("üè† –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–µ–ø–ª–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∫–æ–Ω–∫—É—Ä—Å–æ–≤ —Å Mock —Ç–æ–∫–µ–Ω–∞–º–∏...");

  // =============================================
  // –ü–û–õ–£–ß–ï–ù–ò–ï –ü–ê–†–ê–ú–ï–¢–†–û–í –î–õ–Ø LOCALHOST
  // =============================================
  
  // –î–ª—è localhost –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥—Ä–µ—Å –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ hardhat
  const treasuryAddress = m.getParameter("treasuryAddress", "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266");
  const platformFeePercentage = m.getParameter("platformFeePercentage", 300); // 3% –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤

  console.log(`üè† –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏`);
  console.log(`üí∞ Treasury: ${treasuryAddress}`);
  console.log(`üí∏ –ö–æ–º–∏—Å—Å–∏—è: ${Number(platformFeePercentage)/100}%`);
  console.log(`‚è±Ô∏è –í—Ä–µ–º—è: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (1 —á–∞—Å - 30 –¥–Ω–µ–π)`);

  // =============================================
  // –î–ï–ü–õ–û–ô –û–°–ù–û–í–ù–´–• –ö–û–ù–¢–†–ê–ö–¢–û–í
  // =============================================
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º CoreModule –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–∫–∞–∫ –≤ PublicDeploy)
  const coreModule = m.useModule(CoreModule);
  
  // =============================================
  // –î–ï–ü–õ–û–ô –ò –ù–ê–°–¢–†–û–ô–ö–ê MOCK –¢–û–ö–ï–ù–û–í
  // =============================================
  
  const mockModule = m.useModule(MockModule);
  
  console.log("ü™ô –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Mock —Ç–æ–∫–µ–Ω–æ–≤ –≤ TokenValidator...");

  // –î–æ–±–∞–≤–ª—è–µ–º mock —Ç–æ–∫–µ–Ω—ã –≤ whitelist
  m.call(coreModule.tokenValidator, "setTokenWhitelisted", [mockModule.mockUSDC, true], {
    id: "whitelist_mock_usdc"
  });
  
  m.call(coreModule.tokenValidator, "setTokenWhitelisted", [mockModule.mockUSDT, true], {
    id: "whitelist_mock_usdt"
  });
  
  m.call(coreModule.tokenValidator, "setTokenWhitelisted", [mockModule.mockWETH, true], {
    id: "whitelist_mock_weth"
  });

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º price feeds –¥–ª—è mock —Ç–æ–∫–µ–Ω–æ–≤
  m.call(coreModule.tokenValidator, "setPriceFeed", [mockModule.mockUSDC, mockModule.usdcPriceFeed], {
    id: "set_mock_usdc_price"
  });
  
  m.call(coreModule.tokenValidator, "setPriceFeed", [mockModule.mockUSDT, mockModule.usdtPriceFeed], {
    id: "set_mock_usdt_price"
  });
  
  m.call(coreModule.tokenValidator, "setPriceFeed", [mockModule.mockWETH, mockModule.wethPriceFeed], {
    id: "set_mock_weth_price"
  });

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è localhost (–æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
  m.call(coreModule.tokenValidator, "setMinimumPrizeAmount", [mockModule.mockWETH, "1000000000000000"], {
    id: "set_mock_weth_minimum" // 0.001 WETH
  });

  m.call(coreModule.tokenValidator, "setMinimumPrizeAmount", [mockModule.mockUSDC, "1000000"], {
    id: "set_mock_usdc_minimum" // $1 USDC (6 decimals)
  });

  m.call(coreModule.tokenValidator, "setMinimumPrizeAmount", [mockModule.mockUSDT, "1000000"], {
    id: "set_mock_usdt_minimum" // $1 USDT (6 decimals)
  });

  // =============================================
  // –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø LOCALHOST
  // =============================================
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—á–µ–Ω—å –Ω–∏–∑–∫—É—é –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è localhost
  m.call(coreModule.networkFeeManager, "setNetworkFee", [31337, 100], { // 1% –¥–ª—è localhost (chainId 31337)
    id: "set_localhost_fee"
  });

  // =============================================
  // –ú–ò–ù–¢ –¢–û–ö–ï–ù–û–í –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
  // =============================================
  
  console.log("üí∞ –ú–∏–Ω—Ç–∏–º —Ç–æ–∫–µ–Ω—ã –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã...");
  
  const testAccounts = [
    "0x70997970C51812dc3A010C7d01b50e0d17dc79C8", // account 1
    "0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC", // account 2
    "0x90F79bf6EB2c4f870365E785982E1f101E93b906"  // account 3
  ];

  // –ú–∏–Ω—Ç–∏–º –∫–∞–∂–¥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  for (let i = 0; i < testAccounts.length; i++) {
    // USDC (6 decimals) - 10,000 USDC
    m.call(mockModule.mockUSDC, "mint", [testAccounts[i], "10000000000"], {
      id: `mint_usdc_${i}`
    });
    
    // USDT (6 decimals) - 10,000 USDT
    m.call(mockModule.mockUSDT, "mint", [testAccounts[i], "10000000000"], {
      id: `mint_usdt_${i}`
    });
    
    // WETH (18 decimals) - 100 WETH
    m.call(mockModule.mockWETH, "mint", [testAccounts[i], "100000000000000000000"], {
      id: `mint_weth_${i}`
    });
  }

  console.log("üéâ Localhost –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!");
  console.log("üß™ Mock —Ç–æ–∫–µ–Ω—ã –≥–æ—Ç–æ–≤—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
  console.log("üí∞ –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞–º–∏");
  console.log("‚è±Ô∏è –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã:");
  console.log("   - contestFactory.setMinContestDuration(300)  // 5 –º–∏–Ω—É—Ç –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤");
  console.log("   - contestFactory.setMaxContestDuration(86400) // 1 –¥–µ–Ω—å –º–∞–∫—Å–∏–º—É–º");

  return {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    contestFactory: coreModule.contestFactory,
    prizeTemplates: coreModule.prizeTemplates,
    tokenValidator: coreModule.tokenValidator,
    networkFeeManager: coreModule.networkFeeManager,
    prizeManager: coreModule.prizeManager,
    creatorBadges: coreModule.creatorBadges,
    
    // Mock —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    mockUSDC: mockModule.mockUSDC,
    mockUSDT: mockModule.mockUSDT,
    mockWETH: mockModule.mockWETH,
    
    // Price feeds –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    usdcPriceFeed: mockModule.usdcPriceFeed,
    usdtPriceFeed: mockModule.usdtPriceFeed,
    wethPriceFeed: mockModule.wethPriceFeed,
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    testHelper: mockModule.testHelper,
    mockFactory: mockModule.mockFactory
  };
});

export default LocalDeploy;