// =============================================
// üöÄ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô RUNNER –î–õ–Ø –¢–ï–°–¢–û–í
// =============================================

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const testType = args[0] || 'unit';
const additionalArgs = args.slice(1);

// =============================================
// üìù –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –¢–ï–°–¢–û–í
// =============================================

const testConfigs = {
    // Unit —Ç–µ—Å—Ç—ã
    unit: {
        pattern: 'test/unit/*.test.ts',
        folder: 'test/unit',
        description: '–ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤',
        timeout: 60000,
        env: {
            NODE_ENV: 'test',
            DEBUG: 'true',
            REPORT_GAS: 'true'
        }
    },

    // Integration —Ç–µ—Å—Ç—ã  
    integration: {
        pattern: 'test/integration/*.test.ts',
        folder: 'test/integration',
        description: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã',
        timeout: 120000,
        env: {
            NODE_ENV: 'test',
            DEBUG: 'true',
            REPORT_GAS: 'false'
        }
    },

    // E2E —Ç–µ—Å—Ç—ã
    e2e: {
        pattern: 'test/e2e/*.test.ts',
        folder: 'test/e2e',
        description: 'End-to-end —Ç–µ—Å—Ç—ã',
        timeout: 180000,
        env: {
            NODE_ENV: 'test',
            DEBUG: 'false',
            REPORT_GAS: 'false'
        }
    },

    // –í—Å–µ —Ç–µ—Å—Ç—ã
    all: {
        pattern: 'test/**/*.test.ts',
        folder: 'test',
        description: '–í—Å–µ —Ç–µ—Å—Ç—ã',
        timeout: 180000,
        env: {
            NODE_ENV: 'test',
            DEBUG: 'true',
            REPORT_GAS: 'true'
        }
    },

    // Coverage
    coverage: {
        pattern: 'test/unit/**/*.test.ts',
        folder: 'test/unit',
        description: '–¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞',
        timeout: 120000,
        env: {
            NODE_ENV: 'test',
            DEBUG: 'false',
            REPORT_GAS: 'false',
            COVERAGE: 'true'
        }
    },

    // –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã (—Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ)
    quick: {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        pattern: 'test/unit/{ContestEscrow,TokenValidator}.test.ts',
        folder: 'test/unit',
        description: '–ë—ã—Å—Ç—Ä—ã–µ smoke —Ç–µ—Å—Ç—ã',
        timeout: 30000,
        env: {
            NODE_ENV: 'test',
            DEBUG: 'false',
            REPORT_GAS: 'false'
        }
    }
};

// =============================================
// üõ†Ô∏è –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// =============================================

function getTestConfig(type) {
    const config = testConfigs[type];
    if (!config) {
        console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–æ–≤: ${type}`);
        console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: ${Object.keys(testConfigs).join(', ')}`);
        process.exit(1);
    }
    return config;
}

function checkTestFiles(config) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ —Å —Ç–µ—Å—Ç–∞–º–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(config.folder)) {
        console.error(`‚ùå –ü–∞–ø–∫–∞ —Å —Ç–µ—Å—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${config.folder}`);
        console.log(`üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É: mkdir -p ${config.folder}`);
        return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    const glob = require('child_process').execSync(`ls ${config.pattern} 2>/dev/null || echo "NO_FILES"`, {encoding: 'utf8'}).trim();
    
    if (glob === 'NO_FILES' || glob === '') {
        console.error(`‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤: ${config.folder}`);
        console.log(`üí° –ü–∞—Ç—Ç–µ—Ä–Ω –ø–æ–∏—Å–∫–∞: ${config.pattern}`);
        return false;
    }

    return true;
}

function showHelp() {
    console.log(`
üß™ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô RUNNER –î–õ–Ø –¢–ï–°–¢–û–í

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node test/test-runner.js [—Ç–∏–ø] [–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ-–∞—Ä–≥—É–º–µ–Ω—Ç—ã]

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤:
`);
    
    Object.entries(testConfigs).forEach(([type, config]) => {
        console.log(`  ${type.padEnd(12)} - ${config.description}`);
    });
    
    console.log(`
–ü—Ä–∏–º–µ—Ä—ã:
  node test/test-runner.js unit
  node test/test-runner.js integration
  node test/test-runner.js coverage
  node test/test-runner.js unit --grep "should validate"
  node test/test-runner.js --help

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  DEBUG=true          - –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏
  REPORT_GAS=true     - –û—Ç—á–µ—Ç –ø–æ –≥–∞–∑—É
  COVERAGE=true       - –†–µ–∂–∏–º –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞
`);
}

// =============================================
// üöÄ –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê
// =============================================

// –ü–æ–∫–∞–∑–∞—Ç—å help
if (args.includes('--help') || args.includes('-h')) {
    showHelp();
    process.exit(0);
}

console.log(`üß™ –ó–∞–ø—É—Å–∫ ${testType} —Ç–µ—Å—Ç–æ–≤...`);

try {
    const config = getTestConfig(testType);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    if (!checkTestFiles(config)) {
        process.exit(1);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    Object.assign(process.env, config.env);
    
    console.log(`üìã ${config.description}`);
    console.log(`üìÅ –ü–∞–ø–∫–∞: ${config.folder}`);
    console.log(`üîç –ü–∞—Ç—Ç–µ—Ä–Ω: ${config.pattern}`);
    console.log(`‚è±Ô∏è  Timeout: ${config.timeout}ms`);
    console.log(`üåç Env: ${JSON.stringify(config.env, null, 2)}`);
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è coverage
    if (testType === 'coverage') {
        console.log(`üöÄ –ö–æ–º–∞–Ω–¥–∞: npx hardhat coverage --testfiles "${config.pattern}"\n`);
        
        const coverageProcess = spawn('npx', ['hardhat', 'coverage', '--testfiles', config.pattern], {
            stdio: 'inherit',
            env: process.env,
            shell: process.platform === 'win32'
        });
        
        coverageProcess.on('close', (code) => {
            if (code === 0) {
                console.log(`\n‚úÖ Coverage —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!`);
                console.log(`üìä –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ./coverage/`);
            } else {
                console.log(`\n‚ùå Coverage —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: ${code})`);
            }
            process.exit(code);
        });
        
        return;
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Ñ–∞–π–ª–æ–≤ –≤–º–µ—Å—Ç–æ –ø–∞–ø–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    const command = 'npx';
    const baseArgs = ['hardhat', 'test', config.pattern]; // –ò—Å–ø–æ–ª—å–∑—É–µ–º pattern –≤–º–µ—Å—Ç–æ folder
    const finalArgs = [...baseArgs, ...additionalArgs];
    
    console.log(`üöÄ –ö–æ–º–∞–Ω–¥–∞: ${command} ${finalArgs.join(' ')}\n`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    const testProcess = spawn(command, finalArgs, {
        stdio: 'inherit',
        env: process.env,
        shell: process.platform === 'win32'
    });
    
    testProcess.on('close', (code) => {
        if (code === 0) {
            console.log(`\n‚úÖ ${testType} —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!`);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if (testType === 'unit') {
                console.log(`üìà –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º: npm run test:coverage`);
            }
            if (process.env.REPORT_GAS === 'true') {
                console.log(`‚õΩ –û—Ç—á–µ—Ç –æ –≥–∞–∑–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ./gas-report.txt`);
            }
        } else {
            console.log(`\n‚ùå ${testType} —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: ${code})`);
            console.log(`üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: node test/test-runner.js ${testType} --help`);
        }
        process.exit(code);
    });
    
    testProcess.on('error', (error) => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: ${error.message}`);
        console.log(`üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: npm install`);
        process.exit(1);
    });
    
} catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`);
    showHelp();
    process.exit(1);
}