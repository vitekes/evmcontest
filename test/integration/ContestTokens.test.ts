import { expect } from "chai";
import { ethers } from "hardhat";

import { loadFixture } from "@nomicfoundation/hardhat-network-helpers";
import { time } from "@nomicfoundation/hardhat-toolbox/network-helpers";
import {
  ContestFactory,
  NetworkFeeManager,
  TokenValidator,
  MockUSDT,
  MockUSDC
} from "../../typechain-types";
import { SignerWithAddress } from "@nomicfoundation/hardhat-ethers/signers";
import { 
  createTestContest, 
  endContest,
  createContestTimeParams,
  generateTestJury
} from "../helpers/ContestHelper";
import { deployTokenValidatorFixture } from "../fixtures";

describe("Contest Token Integration Tests", function() {
  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
  this.timeout(120000);

  // –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  let contestFactory: ContestFactory;
  let networkFeeManager: NetworkFeeManager;
  let tokenValidator: TokenValidator;

  let owner: SignerWithAddress;
  let creator: SignerWithAddress;
  let winner: SignerWithAddress;
  let juryMember: SignerWithAddress;
  let treasury: SignerWithAddress;

  let mockUSDT: MockUSDT;
  let mockUSDC: MockUSDC;

  // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
  async function deployContractsFixture() {
    [owner, creator, winner, juryMember, treasury] = await ethers.getSigners();

    // 1. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
    const tokenFixture = await deployTokenValidatorFixture();
    tokenValidator = tokenFixture.tokenValidator;
    mockUSDT = tokenFixture.mockUSDT;
    mockUSDC = tokenFixture.mockUSDC;

    // 2. NetworkFeeManager
    const NetworkFeeManager = await ethers.getContractFactory("NetworkFeeManager");
    networkFeeManager = await NetworkFeeManager.deploy(treasury.address);
    await networkFeeManager.waitForDeployment();

    // 3. –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
    const PrizeTemplates = await ethers.getContractFactory("PrizeTemplates");
    const prizeTemplates = await PrizeTemplates.deploy();
    await prizeTemplates.waitForDeployment();

    const PrizeManager = await ethers.getContractFactory("PrizeManager");
    const prizeManager = await PrizeManager.deploy();
    await prizeManager.waitForDeployment();

    const CreatorBadges = await ethers.getContractFactory("CreatorBadges");
    const creatorBadges = await CreatorBadges.deploy();
    await creatorBadges.waitForDeployment();

    const ContestEscrow = await ethers.getContractFactory("ContestEscrow");
    const contestEscrow = await ContestEscrow.deploy();
    await contestEscrow.waitForDeployment();

    // 4. ContestFactory
    const ContestFactory = await ethers.getContractFactory("ContestFactory");
    contestFactory = await ContestFactory.deploy(
        await contestEscrow.getAddress(),
        await networkFeeManager.getAddress(),
        await prizeTemplates.getAddress(),
        await creatorBadges.getAddress(),
        await tokenValidator.getAddress(),
        await prizeManager.getAddress()
    );
    await contestFactory.waitForDeployment();

    // 5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    await networkFeeManager.setNetworkFee(31337, 200); // 2%
    await networkFeeManager.setContestFactory(await contestFactory.getAddress());
    await prizeManager.setAuthorizedCreator(await contestFactory.getAddress(), true);
    await creatorBadges.setContestFactory(await contestFactory.getAddress());

    // 6. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
    const tokenAmount = ethers.parseUnits("10000", 18);
    
    // –ú–∏–Ω—Ç —Ç–æ–∫–µ–Ω–æ–≤ —Å–æ–∑–¥–∞—Ç–µ–ª—é
    await mockUSDT.mint(creator.address, tokenAmount);
    await mockUSDC.mint(creator.address, tokenAmount);

    // –û–¥–æ–±—Ä–µ–Ω–∏—è
    await mockUSDT.connect(creator).approve(await contestFactory.getAddress(), tokenAmount);
    await mockUSDC.connect(creator).approve(await contestFactory.getAddress(), tokenAmount);

    return {
      contestFactory,
      networkFeeManager,
      tokenValidator,
      mockUSDT,
      mockUSDC,
      owner,
      creator,
      winner,
      juryMember,
      treasury
    };
  }

  beforeEach(async function() {
    const fixture = await loadFixture(deployContractsFixture);
    Object.assign(this, fixture);
  });

  it("–ü–æ–ª–Ω—ã–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –∫–æ–Ω–∫—É—Ä—Å–∞ —Å USDT —Ç–æ–∫–µ–Ω–æ–º", async function() {
    console.log("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ —Å USDT –ø—Ä–∏–∑–æ–º");

    const totalPrize = ethers.parseUnits("100", await mockUSDT.decimals());
    const currentTime = await time.latest();
    const {startTime, endTime} = createContestTimeParams(currentTime, 24, 1);

    const contestResult = await createTestContest(
      contestFactory,
      networkFeeManager,
      creator,
      {
        token: await mockUSDT.getAddress(),
        totalPrize: totalPrize,
        template: 1,
        startTime: startTime,
        endTime: endTime,
        jury: [juryMember.address],
        metadata: {
          title: "USDT Test Contest",
          description: "Testing full contest lifecycle with USDT"
        }
      }
    );

    const { contestId, escrow, escrowAddress } = contestResult;
    console.log(`–ö–æ–Ω–∫—É—Ä—Å —Å–æ–∑–¥–∞–Ω: ID=${contestId}, –∞–¥—Ä–µ—Å —ç—Å–∫—Ä–æ—É=${escrowAddress}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    expect(contestId).to.be.gte(BigInt(0));
    expect(escrowAddress).to.not.equal(ethers.ZeroAddress);

    const escrowBalance = await mockUSDT.balanceOf(escrowAddress);
    expect(escrowBalance).to.equal(totalPrize);

    // –ù–∞—á–∞–ª–æ –∫–æ–Ω–∫—É—Ä—Å–∞
    console.log("‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∫–æ–Ω–∫—É—Ä—Å–∞");
    await time.increaseTo(Number(startTime) + 10);

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞
    console.log("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞");
    await endContest(escrow);

    // –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    console.log("üèÜ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è");
    const winners = [winner.address];
    const places = [1];

    await escrow.connect(juryMember).declareWinners(winners, places);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–∑–∞
    console.log("üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–∑–∞");
    const winnerBalanceBefore = await mockUSDT.balanceOf(winner.address);
    
    await escrow.connect(winner).claimPrize();
    
    const winnerBalanceAfter = await mockUSDT.balanceOf(winner.address);
    const received = winnerBalanceAfter - winnerBalanceBefore;
    
    expect(received).to.be.gt(0);
    console.log("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω");
  });

  it("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Ç–æ–∫–µ–Ω–æ–≤", async function() {
    console.log("üíé –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ —Å ETH");
    
    // ETH –∫–æ–Ω–∫—É—Ä—Å
    const ethTotalPrize = ethers.parseEther("1");
    const currentTime = await time.latest();
    const {startTime: ethStartTime, endTime: ethEndTime} = createContestTimeParams(currentTime, 24, 1);

    const ethContestResult = await createTestContest(
      contestFactory,
      networkFeeManager,
      creator,
      {
        token: ethers.ZeroAddress,
        totalPrize: ethTotalPrize,
        template: 0,
        startTime: ethStartTime,
        endTime: ethEndTime,
        metadata: {
          title: "ETH Contest",
          description: "Contest with ETH prize"
        }
      }
    );

    expect(ethContestResult.contestId).to.be.gte(BigInt(0));

    // –ö–æ–Ω—Ç—Ä–∞–∫—Ç ContestFactory —Ç—Ä–µ–±—É–µ—Ç –ø–∞—É–∑—ã –º–∏–Ω–∏–º—É–º 1 —á–∞—Å –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏—è–º–∏
    // –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ –∞–¥—Ä–µ—Å–æ–º. –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å
    // –æ—Ç–∫–∞—Ç–∞ —Å –æ—à–∏–±–∫–æ–π "Wait between contests" –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ
    // –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞.
    await time.increase(3600 + 1);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω–∫—É—Ä—Å
    // –∏–º–µ–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞.
    const timeAfterEth = await time.latest();

    // USDC –∫–æ–Ω–∫—É—Ä—Å
    console.log("üíµ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ —Å USDC");
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ USDC –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω
    try {
      const [owner] = await ethers.getSigners();

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const isValid = await tokenValidator.isValidToken(await mockUSDC.getAddress());
      const isStable = await tokenValidator.isStablecoin(await mockUSDC.getAddress());
      console.log(`USDC –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π: isValid=${isValid}, isStable=${isStable}`);

      // –î–æ–±–∞–≤–ª—è–µ–º USDC –≤ whitelist (–≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º owner)
      if (!isValid) {
        await tokenValidator.connect(owner).setTokenWhitelist(await mockUSDC.getAddress(), true, "USDC for test");
        console.log("‚úÖ USDC –¥–æ–±–∞–≤–ª–µ–Ω –≤ whitelist");
      }

      if (!isStable) {
        console.log("–ü–æ–ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å USDC –∫–∞–∫ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ whitelist —Å –ø—Ä–∏–∑–Ω–∞–∫–æ–º —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–∞");

        // –ü—Ä–æ–≤–µ—Ä–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
        const tokenInfo = await mockUSDC.name();
        const tokenSymbol = await mockUSDC.symbol();
        const tokenDecimals = await mockUSDC.decimals();
        console.log(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ: ${tokenInfo} (${tokenSymbol}), decimals: ${tokenDecimals}`);

        // –≠—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –ª—é–±–æ–π –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏–∏ TokenValidator
        try {
          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ whitelist —Å –ø—Ä–∏–∑–Ω–∞–∫–æ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω
          await tokenValidator.connect(owner).setTokenWhitelist(await mockUSDC.getAddress(), true, 
              "USDC stablecoin for test");

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ —á–µ—Ä–µ–∑ TokenInfo (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
          try {
            const info = await tokenValidator.tokenInfoCache?.(await mockUSDC.getAddress());
            console.log(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∫–µ—à–∞ –æ —Ç–æ–∫–µ–Ω–µ: ${JSON.stringify(info || '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}`);
          } catch (cacheErr) {
            console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–µ—à–∞: ${cacheErr instanceof Error ? cacheErr.message : String(cacheErr)}`);
          }

          console.log("‚úÖ USDC –¥–æ–±–∞–≤–ª–µ–Ω –≤ whitelist —Å —É–∫–∞–∑–∞–Ω–∏–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω");
        } catch (whitelistErr) {
          console.error(`‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å whitelist –¥–ª—è USDC: ${whitelistErr}`);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const isValidAfter = await tokenValidator.isValidToken(await mockUSDC.getAddress());
      const isStableAfter = await tokenValidator.isStablecoin(await mockUSDC.getAddress());
      console.log(`USDC –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: isValid=${isValidAfter}, isStable=${isStableAfter}`);

    } catch (error) {
      console.log(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å USDC: ${error}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–Ω–∫—É—Ä—Å–∞
    const usdcTotalPrize = ethers.parseUnits("50", await mockUSDC.decimals());
    const usdcFee = await networkFeeManager.calculateFee(31337, usdcTotalPrize);
    const usdcTotal = usdcTotalPrize + usdcFee;

    console.log(`USDC: –ø—Ä–∏–∑=${usdcTotalPrize}, –∫–æ–º–∏—Å—Å–∏—è=${usdcFee}, –≤—Å–µ–≥–æ=${usdcTotal}`);
    console.log(`–ë–∞–ª–∞–Ω—Å USDC —É —Å–æ–∑–¥–∞—Ç–µ–ª—è: ${await mockUSDC.balanceOf(creator.address)}`);
    console.log(`–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ USDC: ${await mockUSDC.allowance(creator.address, await contestFactory.getAddress())}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    await mockUSDC.connect(creator).approve(await contestFactory.getAddress(), ethers.parseUnits("1000", await mockUSDC.decimals()));
    console.log(`–ù–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ USDC: ${await mockUSDC.allowance(creator.address, await contestFactory.getAddress())}`);

    const {startTime: usdcStartTime, endTime: usdcEndTime} = createContestTimeParams(timeAfterEth, 72, 2);

    // –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤–Ω–µ –±–ª–æ–∫–∞ try
    let usdcContestResult;

    try {
      console.log("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ —Å USDC...");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
      console.log(`–ë–∞–ª–∞–Ω—Å USDC –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º: ${await mockUSDC.balanceOf(creator.address)}`);
      console.log(`–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ USDC –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º: ${await mockUSDC.allowance(creator.address, await contestFactory.getAddress())}`);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤
      try {
        const lastId = await contestFactory.lastId();
        console.log(`–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–∫—É—Ä—Å–æ–≤ (lastId): ${lastId}`);
      } catch (err) {
        console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å lastId: ${err instanceof Error ? err.message : String(err)}`);
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –≥–∞–∑–∞ –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞
      const gasLimit = 12000000; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ—â–µ –±–æ–ª—å—à–µ
      console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π gasLimit: ${gasLimit}`);

      // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω–∫—É—Ä—Å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –æ–±—Ö–æ–¥—è helper
      const usdcAddress = await mockUSDC.getAddress();

      // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π approve
      await mockUSDC.connect(creator).approve(await contestFactory.getAddress(), usdcTotal * BigInt(2));
      console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ USDC: ${await mockUSDC.allowance(creator.address, await contestFactory.getAddress())}`);

      // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞
      const contestParams = {
        token: mockUSDC,
        totalPrize: usdcTotalPrize,
        template: 0,
        customDistribution: [],
        jury: [creator.address],
        startTime: usdcStartTime,
        endTime: usdcEndTime,
        contestMetadata: JSON.stringify({
          title: "USDC Contest",
          description: "Contest with USDC prize"
        }),
        hasNonMonetaryPrizes: false
      };

      console.log("–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ createContest —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º USDC —Ç–æ–∫–µ–Ω–æ–º...");

      try {
        // –ü—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
        const tx = await contestFactory.connect(creator).createContest(contestParams, {
          gasLimit: gasLimit
        });

        console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${tx.hash}`);
        const receipt = await tx.wait();
        console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: ${receipt?.hash || '–Ω–µ—Ç —Ö–µ—à–∞'}`);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º contestId –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é lastId –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        // —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. lastId —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å—Ç—Ñ–∏–∫—Å–Ω–æ, –ø–æ—ç—Ç–æ–º—É –æ–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞
        // —Å–ª–µ–¥—É—é—â–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä. ID —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
        // —Ä–∞–≤–µ–Ω lastId - 1.
        const lastIdAfter = await contestFactory.lastId();
        let contestId = lastIdAfter - BigInt(1);
        console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º lastId-1 –∫–∞–∫ contestId: ${contestId}`);

        // –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º —ç—Å–∫—Ä–æ—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        const escrowAddress = await contestFactory.escrows(Number(contestId));
        const escrow = await ethers.getContractAt("ContestEscrow", escrowAddress);

        usdcContestResult = {
          contestId,
          escrow,
          escrowAddress,
          transaction: tx,
          receipt
        };

      } catch (directError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ createContest: ${directError}`);
        console.error(`–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${JSON.stringify(directError, (_, v) => 
          typeof v === 'bigint' ? v.toString() : v, 2)}`);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é helper
        console.log("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é helper createTestContest...");
        usdcContestResult = await createTestContest(
          contestFactory,
          networkFeeManager,
          creator,
          {
            token: usdcAddress,
            totalPrize: usdcTotalPrize,
            template: 0,
            startTime: usdcStartTime,
            endTime: usdcEndTime,
            metadata: {
              title: "USDC Contest",
              description: "Contest with USDC prize"
            }
          }
        );
      }

      console.log(`‚úÖ –ö–æ–Ω–∫—É—Ä—Å —Å USDC —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ! ID: ${usdcContestResult.contestId}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω–∫—É—Ä—Å–∞ —Å USDC: ${error}`);
      throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –ø—Ä–æ–≤–∞–ª–∞ —Ç–µ—Å—Ç–∞
    }

    expect(usdcContestResult.contestId).to.be.gte(BigInt(0));
    expect(usdcContestResult.contestId).to.be.gt(ethContestResult.contestId);

    console.log("‚úÖ –¢–µ—Å—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω");
  });

  it("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ TokenValidator", async function() {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ USDT");
    
    const isUsdtValid = await tokenValidator.isValidToken(await mockUSDT.getAddress());
    console.log(`USDT –≤–∞–ª–∏–¥–µ–Ω: ${isUsdtValid}`);

    const usdtInfo = await tokenValidator.getTokenInfo(await mockUSDT.getAddress());
    console.log(`USDT –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: hasLiquidity=${usdtInfo.hasLiquidity}, isStablecoin=${usdtInfo.isStablecoin}`);

    const isUsdtStablecoin = await tokenValidator.isStablecoin(await mockUSDT.getAddress());
    expect(isUsdtStablecoin).to.be.true;

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const totalPrize = ethers.parseUnits("100", await mockUSDT.decimals());
    const currentTime = await time.latest();
    const {startTime, endTime} = createContestTimeParams(currentTime, 24, 1);

    const contestResult = await createTestContest(
      contestFactory,
      networkFeeManager,
      creator,
      {
        token: await mockUSDT.getAddress(),
        totalPrize: totalPrize,
        template: 0,
        startTime: startTime,
        endTime: endTime,
        metadata: {
          title: "USDT Validation Test",
          description: "Testing token validation"
        }
      }
    );

    expect(contestResult.contestId).to.be.gte(BigInt(0));
    console.log("‚úÖ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω");
  });

  it("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤", async function() {
    console.log("üíº –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∏—Å—Å–∏–π");

    // ETH –∫–æ–Ω–∫—É—Ä—Å
    const ethTotalPrize = ethers.parseEther("10");
    const ethFee = await networkFeeManager.calculateFee(31337, ethTotalPrize);
    const currentTime = await time.latest();
    const {startTime: ethStartTime, endTime: ethEndTime} = createContestTimeParams(currentTime, 24, 1);

    await createTestContest(
      contestFactory,
      networkFeeManager,
      creator,
      {
        token: ethers.ZeroAddress,
        totalPrize: ethTotalPrize,
        template: 0,
        startTime: ethStartTime,
        endTime: ethEndTime,
        metadata: {
          title: "ETH Fee Test",
          description: "Testing fee calculation with ETH"
        }
      }
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∏—Å—Å–∏—é ETH
      const availableETHFees = await networkFeeManager.getAvailableETHFees();
      expect(availableETHFees).to.equal(ethFee);

      // –ú–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 1 —á–∞—Å. –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º
      // –≤—Ä–µ–º—è, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
      // `Wait between contests` –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ ContestFactory.
      await time.increase(3600 + 1);

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –ø–∞—É–∑—ã, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω–∫—É—Ä—Å –∏–º–µ–ª
      // –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
      const afterEthFeeTime = await time.latest();

    // USDT –∫–æ–Ω–∫—É—Ä—Å
    const usdtTotalPrize = ethers.parseUnits("1000", await mockUSDT.decimals());
    const usdtFee = await networkFeeManager.calculateFee(31337, usdtTotalPrize);
    const {startTime: usdtStartTime, endTime: usdtEndTime} = createContestTimeParams(afterEthFeeTime, 24, 2);

    await createTestContest(
      contestFactory,
      networkFeeManager,
      creator,
      {
        token: await mockUSDT.getAddress(),
        totalPrize: usdtTotalPrize,
        template: 0,
        startTime: usdtStartTime,
        endTime: usdtEndTime,
        metadata: {
          title: "USDT Fee Test",
          description: "Testing fee calculation with USDT"
        }
      }
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∏—Å—Å–∏—é USDT
    const availableUSDTFees = await networkFeeManager.getAvailableTokenFees(await mockUSDT.getAddress());
    expect(availableUSDTFees).to.equal(usdtFee);

    console.log("‚úÖ –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω");
  });

});