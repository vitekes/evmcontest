// –ü—É—Ç—å: test/integration/ContestLifecycle.test.ts
import {expect} from "chai";
import {ethers} from "hardhat";
import {loadFixture} from "@nomicfoundation/hardhat-network-helpers";
import {time} from "@nomicfoundation/hardhat-toolbox/network-helpers";
import {SignerWithAddress} from "@nomicfoundation/hardhat-ethers/signers";
import {
    createTestContest,
    endContest,
    verifyPrizeClaim,
    createContestTimeParams,
    generateTestJury,
    generateTestWinners
} from "../helpers/ContestHelper";
import {deployContestLifecycleFixture} from "../fixtures/ContestFixture";
import {ContestFactory, ContestEscrow, NetworkFeeManager} from "../../typechain-types";

describe("Contest Lifecycle Integration", function () {
    // –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
    let contestFactory: ContestFactory;
    let networkFeeManager: NetworkFeeManager;
    let owner: SignerWithAddress;
    let creator: SignerWithAddress;
    let winner1: SignerWithAddress;
    let winner2: SignerWithAddress;
    let juryMember: SignerWithAddress;
    let treasury: SignerWithAddress;

    // –ü–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É
    beforeEach(async function () {
        const fixture = await loadFixture(deployContestLifecycleFixture);
        // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∏–∫—Å—Ç—É—Ä—ã
        contestFactory = fixture.contestFactory;
        networkFeeManager = fixture.networkFeeManager;
        owner = fixture.owner;
        creator = fixture.creator;
        winner1 = fixture.winner1;
        winner2 = fixture.winner2;
        juryMember = fixture.juryMember;
        treasury = fixture.treasury;
    });

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∫–æ–Ω–∫—É—Ä—Å–∞
    it("–ü–æ–ª–Ω—ã–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –∫–æ–Ω–∫—É—Ä—Å–∞ –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞", async function () {
        console.log("1. üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ —Å ETH –ø—Ä–∏–∑–æ–º");

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω–∫—É—Ä—Å–∞
        const totalPrize = ethers.parseEther("1"); // 1 ETH –∫–∞–∫ –ø—Ä–∏–∑
        const currentTime = await time.latest();
        const {startTime, endTime} = createContestTimeParams(currentTime, 24, 1); // 24 —á–∞—Å–∞, –Ω–∞—á–∞–ª–æ —á–µ—Ä–µ–∑ 1 —á–∞—Å

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–∫—É—Ä—Å —Å –¥–≤—É–º—è –º–µ—Å—Ç–∞–º–∏ (60% –ø–µ—Ä–≤–æ–º—É, 40% –≤—Ç–æ—Ä–æ–º—É)
        const contestResult = await createTestContest(
            contestFactory,
            networkFeeManager,
            creator,
            {
                token: ethers.ZeroAddress, // ETH
                totalPrize: totalPrize,
                template: 1, // –®–∞–±–ª–æ–Ω —Å –¥–≤—É–º—è –ø—Ä–∏–∑–æ–≤—ã–º–∏ –º–µ—Å—Ç–∞–º–∏
                startTime: startTime,
                endTime: endTime,
                jury: [juryMember.address], // –î–æ–±–∞–≤–ª—è–µ–º —á–ª–µ–Ω–∞ –∂—é—Ä–∏
                metadata: {
                    title: "Lifecycle Test Contest",
                    description: "Testing full contest lifecycle"
                }
            }
        );

        const {contestId, escrow, escrowAddress} = contestResult;
        console.log(`–ö–æ–Ω–∫—É—Ä—Å —Å–æ–∑–¥–∞–Ω: ID=${contestId}, –∞–¥—Ä–µ—Å —ç—Å–∫—Ä–æ—É=${escrowAddress}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω–∫—É—Ä—Å —Å–æ–∑–¥–∞–Ω
        expect(contestId).to.be.gt(BigInt(0));
        expect(escrowAddress).to.not.equal(ethers.ZeroAddress);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Å–∫—Ä–æ—É –ø–æ–ª—É—á–∏–ª —Å—Ä–µ–¥—Å—Ç–≤–∞
        const escrowBalance = await ethers.provider.getBalance(escrowAddress);
        expect(escrowBalance).to.equal(totalPrize);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—É—Ä—Å–µ
        const contestInfo = await escrow.getContestInfo();
        expect(contestInfo.contestCreator).to.equal(creator.address);
        expect(contestInfo.totalPrize).to.equal(totalPrize);
        expect(contestInfo.isActive).to.be.false; // –ö–æ–Ω–∫—É—Ä—Å –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è

        // 2. –ù–∞—á–∞–ª–æ –∫–æ–Ω–∫—É—Ä—Å–∞
        console.log("2. ‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∫–æ–Ω–∫—É—Ä—Å–∞");
        await time.increaseTo(Number(startTime) + 10); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞
        const contestInfoAfterStart = await escrow.getContestInfo();
        expect(contestInfoAfterStart.isActive).to.be.true;

        // 3. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞
        console.log("3. üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞");
        await endContest(escrow); // –ò—Å–ø–æ–ª—å–∑—É–µ–º helper –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        const contestInfoAfterEnd = await escrow.getContestInfo();
        expect(contestInfoAfterEnd.isActive).to.be.false;
        expect(contestInfoAfterEnd.isFinalized).to.be.false; // –ï—â—ë –Ω–µ –æ–±—ä—è–≤–ª–µ–Ω—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏

        // 4. –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        console.log("4. üèÜ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —á–ª–µ–Ω–æ–º –∂—é—Ä–∏");

        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å—É–º–º
        const distribution = await escrow.getDistribution();
        expect(distribution.length).to.be.gte(2); // –£ –Ω–∞—Å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç–∞

        // –û–±—ä—è–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (winner1 - 1 –º–µ—Å—Ç–æ, winner2 - 2 –º–µ—Å—Ç–æ)
        const winners = [winner1.address, winner2.address];
        const places = [1, 2]; // 1-–µ –∏ 2-–µ –º–µ—Å—Ç–æ

        // –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –æ—Ç –∏–º–µ–Ω–∏ —á–ª–µ–Ω–∞ –∂—é—Ä–∏
        const declareWinnersTx = await escrow.connect(juryMember).declareWinners(winners, places);
        await declareWinnersTx.wait();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–Ω–∫—É—Ä—Å —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        const contestInfoAfterFinalize = await escrow.getContestInfo();
        expect(contestInfoAfterFinalize.isFinalized).to.be.true;

        // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const [declaredWinners,] = await escrow.getWinners();
        expect(declaredWinners.length).to.equal(2);
        expect(declaredWinners[0]).to.equal(winner1.address);
        expect(declaredWinners[1]).to.equal(winner2.address);

        // 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–∑–∞ –ø–µ—Ä–≤—ã–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
        console.log("5. üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–∑–∞ –ø–µ—Ä–≤—ã–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º");

        // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –ø—Ä–∏–∑–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –º–µ—Å—Ç–∞
        const expectedPrize1 = (totalPrize * BigInt(distribution[0].percentage)) / BigInt(10000);
        console.log(`–û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–∏–∑ –¥–ª—è 1-–≥–æ –º–µ—Å—Ç–∞: ${ethers.formatEther(expectedPrize1)} ETH`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ —Å –ø–æ–º–æ—â—å—é —Ö–µ–ª–ø–µ—Ä–∞
        const actualReceived1 = await verifyPrizeClaim(escrow, winner1, expectedPrize1);
        console.log(`–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω–æ: ${ethers.formatEther(actualReceived1)} ETH`);
        expect(actualReceived1).to.be.approximately(expectedPrize1, BigInt(1e10)); // –î–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å

        // 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–∑–∞ –≤—Ç–æ—Ä—ã–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
        console.log("6. üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–∑–∞ –≤—Ç–æ—Ä—ã–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º");

        // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –ø—Ä–∏–∑–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—Ç–∞
        const expectedPrize2 = (totalPrize * BigInt(distribution[1].percentage)) / BigInt(10000);
        console.log(`–û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–∏–∑ –¥–ª—è 2-–≥–æ –º–µ—Å—Ç–∞: ${ethers.formatEther(expectedPrize2)} ETH`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ —Å –ø–æ–º–æ—â—å—é —Ö–µ–ª–ø–µ—Ä–∞
        const actualReceived2 = await verifyPrizeClaim(escrow, winner2, expectedPrize2);
        console.log(`–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω–æ: ${ethers.formatEther(actualReceived2)} ETH`);
        expect(actualReceived2).to.be.approximately(expectedPrize2, BigInt(1e10)); // –î–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å

        // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —ç—Å–∫—Ä–æ—É –ø–æ—Å–ª–µ –≤—ã–ø–ª–∞—Ç—ã –≤—Å–µ—Ö –ø—Ä–∏–∑–æ–≤
        console.log("7. üßÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —ç—Å–∫—Ä–æ—É –ø–æ—Å–ª–µ –≤—ã–ø–ª–∞—Ç—ã –≤—Å–µ—Ö –ø—Ä–∏–∑–æ–≤");
        const escrowBalanceAfter = await ethers.provider.getBalance(escrowAddress);

        // –û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∏–∑-–∑–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–∞—Ö
        console.log(`–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —ç—Å–∫—Ä–æ—É: ${ethers.formatEther(escrowBalanceAfter)} ETH`);
        expect(escrowBalanceAfter).to.be.lt(BigInt(1e15)); // –ú–µ–Ω—å—à–µ 0.001 ETH

        console.log("‚úÖ –¢–µ—Å—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω");
    });

    // –¢–µ—Å—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–ª–µ–Ω–æ–≤ –∂—é—Ä–∏
    it("–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —á–ª–µ–Ω–∞–º–∏ –∂—é—Ä–∏", async function () {
        console.log("üß™ –¢–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —á–ª–µ–Ω–∞–º–∏ –∂—é—Ä–∏");

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–∫—É—Ä—Å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —á–ª–µ–Ω–∞–º–∏ –∂—é—Ä–∏
        const totalPrize = ethers.parseEther("0.5");
        const currentTime = await time.latest();
        const {startTime, endTime} = createContestTimeParams(currentTime, 24, 1);

        // –ú–∞—Å—Å–∏–≤ —á–ª–µ–Ω–æ–≤ –∂—é—Ä–∏ (3 —á–ª–µ–Ω–∞ –∂—é—Ä–∏)
        const juryMembers = [juryMember.address, owner.address, creator.address];

        const contestResult = await createTestContest(
            contestFactory,
            networkFeeManager,
            creator,
            {
                token: ethers.ZeroAddress,
                totalPrize: totalPrize,
                template: 0, // –®–∞–±–ª–æ–Ω "–ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –≤—Å—ë"
                startTime: startTime,
                endTime: endTime,
                jury: juryMembers,
                metadata: {
                    title: "Multi-Jury Test Contest",
                    description: "Testing contest with multiple jury members"
                }
            }
        );

        const {escrow} = contestResult;
        console.log("‚úÖ –ö–æ–Ω–∫—É—Ä—Å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —á–ª–µ–Ω–∞–º–∏ –∂—é—Ä–∏ —Å–æ–∑–¥–∞–Ω");

        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–Ω–∫—É—Ä—Å
        await endContest(escrow);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —á–ª–µ–Ω—ã –∂—é—Ä–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–æ –æ–±—ä—è–≤–ª—è—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        for (const juryAddress of juryMembers) {
            const isJury = await escrow.isJury(juryAddress);
            expect(isJury).to.be.true;
        }

        // –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –æ—Ç –∏–º–µ–Ω–∏ –≤—Ç–æ—Ä–æ–≥–æ —á–ª–µ–Ω–∞ –∂—é—Ä–∏ (owner)
        const winners = [winner1.address];
        const places = [1];

        const declareWinnersTx = await escrow.connect(owner).declareWinners(winners, places);
        await declareWinnersTx.wait();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–Ω–∫—É—Ä—Å —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        const contestInfo = await escrow.getContestInfo();
        expect(contestInfo.isFinalized).to.be.true;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É
        const [declaredWinners, declaredPlaces] = await escrow.getWinners();
        expect(declaredWinners.length).to.equal(1);
        expect(declaredWinners[0]).to.equal(winner1.address);
        expect(declaredPlaces[0]).to.equal(1);

        console.log("‚úÖ –¢–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —á–ª–µ–Ω–∞–º–∏ –∂—é—Ä–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω");
    });

    // –¢–µ—Å—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–∫–∞–∑–∞ –≤ –¥–æ—Å—Ç—É–ø–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    it("–ó–∞–ø—Ä–µ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ–±—ä—è–≤–ª—è—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π", async function () {
        console.log("üîí –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞");

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–∫—É—Ä—Å
        const totalPrize = ethers.parseEther("0.5");
        const currentTime = await time.latest();
        const {startTime, endTime} = createContestTimeParams(currentTime, 24, 1);

        const contestResult = await createTestContest(
            contestFactory,
            networkFeeManager,
            creator,
            {
                token: ethers.ZeroAddress,
                totalPrize: totalPrize,
                template: 0,
                startTime: startTime,
                endTime: endTime,
                jury: [juryMember.address], // –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —á–ª–µ–Ω –∂—é—Ä–∏
                metadata: {
                    title: "Access Control Test",
                    description: "Testing access control for declaring winners"
                }
            }
        );

        const {escrow} = contestResult;
        console.log("‚úÖ –ö–æ–Ω–∫—É—Ä—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞ —Å–æ–∑–¥–∞–Ω");

        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–Ω–∫—É—Ä—Å
        await endContest(escrow);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ winner1 –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º –∂—é—Ä–∏
        const isJury = await escrow.isJury(winner1.address);
        expect(isJury).to.be.false;

        // –ü–æ–ø—ã—Ç–∫–∞ –æ–±—ä—è–≤–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –æ—Ç –∏–º–µ–Ω–∏ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const winners = [winner2.address];
        const places = [1];

        // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞
        await expect(
            escrow.connect(winner1).declareWinners(winners, places)
        ).to.be.reverted;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω–∫—É—Ä—Å –Ω–µ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        const contestInfo = await escrow.getContestInfo();
        expect(contestInfo.isFinalized).to.be.false;

        console.log("‚úÖ –¢–µ—Å—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω");
    });

    // –¢–µ—Å—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–ª—É—á–∞–π–Ω—ã—Ö —á–ª–µ–Ω–æ–≤ –∂—é—Ä–∏
    it("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —á–ª–µ–Ω–æ–≤ –∂—é—Ä–∏", async function () {
        console.log("üé≤ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–ª–µ–Ω–æ–≤ –∂—é—Ä–∏");

        const juryCount = 5;
        const randomJury = generateTestJury(juryCount);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤
        expect(randomJury.length).to.equal(juryCount);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∞–¥—Ä–µ—Å–∞ —Ä–∞–∑–Ω—ã–µ
        const uniqueAddresses = new Set(randomJury);
        expect(uniqueAddresses.size).to.equal(juryCount);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –≤–∞–ª–∏–¥–Ω—ã–µ
        for (const address of randomJury) {
            expect(ethers.isAddress(address)).to.be.true;
        }

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–∫—É—Ä—Å —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —á–ª–µ–Ω–∞–º–∏ –∂—é—Ä–∏
        const totalPrize = ethers.parseEther("0.1");
        const currentTime = await time.latest();
        const {startTime, endTime} = createContestTimeParams(currentTime, 24, 1);

        const contestResult = await createTestContest(
            contestFactory,
            networkFeeManager,
            creator,
            {
                token: ethers.ZeroAddress,
                totalPrize: totalPrize,
                template: 0,
                startTime: startTime,
                endTime: endTime,
                jury: randomJury,
                metadata: {
                    title: "Random Jury Test",
                    description: "Testing with randomly generated jury members"
                }
            }
        );

        const {escrow} = contestResult;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–ª—É—á–∞–π–Ω—ã–µ —á–ª–µ–Ω—ã –∂—é—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        for (const juryAddress of randomJury) {
            const isJury = await escrow.isJury(juryAddress);
            expect(isJury).to.be.true;
        }

        console.log("‚úÖ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–ª–µ–Ω–æ–≤ –∂—é—Ä–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω");
    });

    // –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    it("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π", async function () {
        console.log("üéØ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π");

        const winnersCount = 3;
        const randomWinners = generateTestWinners(winnersCount);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤
        expect(randomWinners.length).to.equal(winnersCount);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∞–¥—Ä–µ—Å–∞ —Ä–∞–∑–Ω—ã–µ
        const uniqueAddresses = new Set(randomWinners);
        expect(uniqueAddresses.size).to.equal(winnersCount);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –≤–∞–ª–∏–¥–Ω—ã–µ
        for (const address of randomWinners) {
            expect(ethers.isAddress(address)).to.be.true;
        }

        console.log("‚úÖ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω");
    });
});

    