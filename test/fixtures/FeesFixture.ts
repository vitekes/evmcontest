
// ==========================================
// üí∞ –§–ò–ö–°–¢–£–†–´ –î–õ–Ø –ö–û–ú–ò–°–°–ò–ô
// ==========================================

import { ethers } from "hardhat";
import { NetworkFeeManager } from "../../typechain-types";
import { setupTestAccounts } from "./BaseFixture";
import { NETWORK_IDS, TEST_CONSTANTS } from "./ConstantsFixture";

export async function deployNetworkFeeManagerFixture() {
    console.log("üí∞ Deploying NetworkFeeManager for fee tests...");
    
    const accounts = await setupTestAccounts();

    const NetworkFeeManagerFactory = await ethers.getContractFactory("NetworkFeeManager");
    const feeManager = await NetworkFeeManagerFactory.deploy(accounts.treasury.address);
    await feeManager.waitForDeployment();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ç–µ–π
    await feeManager.setNetworkFee(NETWORK_IDS.ETHEREUM, 200);   // 2% –¥–ª—è Ethereum Mainnet
    await feeManager.setNetworkFee(NETWORK_IDS.POLYGON, 100);    // 1% –¥–ª—è Polygon
    await feeManager.setNetworkFee(NETWORK_IDS.LOCALHOST, 200); // 2% –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏

    console.log("‚úÖ NetworkFeeManager deployed successfully!");

    return {
        feeManager: feeManager as NetworkFeeManager,
        ...accounts,
        addresses: {
            feeManager: await feeManager.getAddress()
        }
    };
}