// ==========================================
// ü™ô –§–ò–ö–°–¢–£–†–´ –î–õ–Ø –¢–û–ö–ï–ù–û–í
// ==========================================

import { ethers } from "hardhat";
import { TokenValidator, MockUSDC, MockUSDT, MockWETH } from "../../typechain-types";
import { setupTestAccounts } from "./BaseFixture";

export async function deployTokensOnlyFixture() {
    console.log("ü™ô Deploying tokens only for simple tests...");
    
    const accounts = await setupTestAccounts();

    const MockUSDCFactory = await ethers.getContractFactory("MockUSDC");
    const mockUSDC = await MockUSDCFactory.deploy();
    await mockUSDC.waitForDeployment();

    const MockUSDTFactory = await ethers.getContractFactory("MockUSDT");
    const mockUSDT = await MockUSDTFactory.deploy();
    await mockUSDT.waitForDeployment();

    const MockWETHFactory = await ethers.getContractFactory("MockWETH");
    const mockWETH = await MockWETHFactory.deploy();
    await mockWETH.waitForDeployment();

    // –ú–∏–Ω—Ç —Ç–æ–∫–µ–Ω–æ–≤
    const mintAmount = ethers.parseUnits("100000", 6);
    const ethAmount = ethers.parseEther("100");
    
    const users = [accounts.creator1, accounts.creator2, accounts.participant1, accounts.participant2];
    for (const user of users) {
        await mockUSDC.mint(user.address, mintAmount);
        await mockUSDT.mint(user.address, mintAmount);
        await mockWETH.mint(user.address, ethAmount);
    }

    console.log("‚úÖ Tokens deployed successfully!");

    return {
        mockUSDC: mockUSDC as MockUSDC,
        mockUSDT: mockUSDT as MockUSDT,
        mockWETH: mockWETH as MockWETH,
        ...accounts,
        addresses: {
            mockUSDC: await mockUSDC.getAddress(),
            mockUSDT: await mockUSDT.getAddress(),
            mockWETH: await mockWETH.getAddress()
        }
    };
}

export async function deployTokenValidatorFixture() {
    console.log("üîß Deploying TokenValidator with dependencies...");
    
    const tokenFixture = await deployTokensOnlyFixture();

    const TokenValidatorFactory = await ethers.getContractFactory("TokenValidator");
    const tokenValidator = await TokenValidatorFactory.deploy(
        tokenFixture.addresses.mockWETH,
        [tokenFixture.addresses.mockUSDC, tokenFixture.addresses.mockUSDT]
    );
    await tokenValidator.waitForDeployment();

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ whitelist —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
    await tokenValidator.setTokenWhitelist(tokenFixture.addresses.mockUSDT, true, "Test USDT");
    await tokenValidator.setTokenWhitelist(tokenFixture.addresses.mockUSDC, true, "Test USDC");

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –∫–∞–∫ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã
    try {
        await tokenValidator.setTokenIsStablecoin(tokenFixture.addresses.mockUSDT, true);
        await tokenValidator.setTokenIsStablecoin(tokenFixture.addresses.mockUSDC, true);
        console.log("‚úÖ –¢–æ–∫–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã –≤ TokenValidator");
    } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤: ${error}`);
    }

    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ mock –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
    const MockUniswapV2FactoryFactory = await ethers.getContractFactory("MockUniswapV2Factory");
    const mockUniswapFactory = await MockUniswapV2FactoryFactory.deploy();
    await mockUniswapFactory.waitForDeployment();

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–æ–≤ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
    try {
        await mockUniswapFactory.createPair(
            tokenFixture.addresses.mockUSDC,
            tokenFixture.addresses.mockWETH
        );
        await mockUniswapFactory.createPair(
            tokenFixture.addresses.mockUSDT,
            tokenFixture.addresses.mockWETH
        );
    } catch (error) {
        console.log("‚ö†Ô∏è Warning: Could not create liquidity pairs");
    }

    console.log("‚úÖ TokenValidator deployed successfully!");

    return {
        ...tokenFixture,
        tokenValidator: tokenValidator as TokenValidator,
        mockUniswapFactory,
        addresses: {
            ...tokenFixture.addresses,
            tokenValidator: await tokenValidator.getAddress(),
            mockUniswapFactory: await mockUniswapFactory.getAddress()
        }
    };
}