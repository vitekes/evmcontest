// ==========================================
// üîê –•–ï–õ–ü–ï–†–´ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
// ==========================================

import { expect } from "chai";
import { ethers } from "hardhat";

// –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é testReentrancy, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞–ª–∏—Ü–µ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç

export async function testOverflow(
    contract: any,
    methodName: string,
    args: any[] = [],
    maxValue: bigint = ethers.MaxUint256
): Promise<void> {
    const method = (contract as any)[methodName];
    if (typeof method !== 'function') {
        throw new Error(`Method ${methodName} not found on contract`);
    }
    
    // –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const testArgs = [...args];
    testArgs[testArgs.length - 1] = maxValue;
    
    await expect(
        method(...testArgs)
    ).to.be.revertedWithPanic(0x11); // Overflow panic code
}

export async function testUnauthorizedAccess(
    contract: any,
    methodName: string,
    unauthorizedSigner: any,
    args: any[] = [],
    expectedError: string = "OwnableUnauthorizedAccount"
): Promise<void> {
    const method = (contract.connect(unauthorizedSigner) as any)[methodName];
    if (typeof method !== 'function') {
        throw new Error(`Method ${methodName} not found on contract`);
    }
    
    await expect(
        method(...args)
    ).to.be.revertedWithCustomError(contract, expectedError);
}