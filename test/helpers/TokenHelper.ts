import { ethers } from "hardhat";
import { expect } from "chai";

// ==========================================
// ü™ô –¢–ò–ü–´ –î–õ–Ø –¢–û–ö–ï–ù–û–í
// ==========================================
export interface TokenBalance {
    token: any;
    account: any;
    amount: bigint;
}

export interface MockTokens {
    usdc: any;
    usdt: any;
    weth: any;
}

// ==========================================
// üí∞ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–õ–ê–ù–°–ê–ú–ò
// ==========================================

/**
 * ‚úÖ –ü–æ–ø–æ–ª–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ —É –∞–∫–∫–∞—É–Ω—Ç–∞
 * @param tokenContract –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞
 * @param account –ê–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
 * @param amount –°—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
 */
export async function setupTokenBalance(
    tokenContract: any, 
    account: any, 
    amount: bigint
): Promise<void> {
    try {
        // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é mint (–µ—Å–ª–∏ –µ—Å—Ç—å)
        await tokenContract.mint(account.address, amount);
        console.log(`‚úÖ Minted ${amount} tokens to ${account.address}`);
    } catch {
        try {
            // –ï—Å–ª–∏ mint –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º transfer –æ—Ç owner
            const [owner] = await ethers.getSigners();
            await tokenContract.connect(owner).transfer(account.address, amount);
            console.log(`‚úÖ Transferred ${amount} tokens to ${account.address}`);
        } catch (error) {
            throw new Error(`Failed to setup token balance: ${error}`);
        }
    }
}

/**
 * ‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
 * @param balances –ú–∞—Å—Å–∏–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∞–ª–∞–Ω—Å–æ–≤
 */
export async function setupMultipleTokenBalances(
    balances: TokenBalance[]
): Promise<void> {
    for (const balance of balances) {
        await setupTokenBalance(balance.token, balance.account, balance.amount);
    }
}

/**
 * ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ ERC20 —Ç–æ–∫–µ–Ω–∞
 * @param tokenContract –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞
 * @param tokenValidator –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤
 * @param account –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è
 * @param amount –¢—Ä–µ–±—É–µ–º–∞—è —Å—É–º–º–∞ (–≤–∫–ª—é—á–∞—è fees)
 * @param spender –ê–¥—Ä–µ—Å –¥–ª—è approve (–æ–±—ã—á–Ω–æ factory)
 */
export async function prepareERC20Token(
    tokenContract: any,
    tokenValidator: any,
    account: any,
    amount: bigint,
    spender: string
): Promise<void> {
    console.log(`üîß Preparing ERC20 token for ${account.address}, amount: ${amount}`);

    try {
        // –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const tokenSymbol = await tokenContract.symbol();
        const tokenAddress = await tokenContract.getAddress();
        console.log(`üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ: ${tokenSymbol}, address: ${tokenAddress}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –¥–æ –ª—é–±—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        if (tokenValidator) {
            try {
                const isValid = await tokenValidator.isValidToken(tokenAddress).catch(() => false);
                const isStable = await tokenValidator.isStablecoin?.(tokenAddress).catch(() => false);
                console.log(`üîç –°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏: isValid=${isValid}, isStablecoin=${isStable}`);
            } catch (validationError) {
                console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞: ${validationError}`);
            }
        }

        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        const currentBalance = await tokenContract.balanceOf(account.address);
        console.log(`   Current balance: ${currentBalance}`);

        // 2. –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –ø–æ–ø–æ–ª–Ω—è–µ–º
        if (currentBalance < amount) {
            const needAmount = amount - currentBalance;
            console.log(`   Need additional: ${needAmount}`);

            // –ü—Ä–æ–±—É–µ–º mint —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º –∑–∞–ø–∞—Å–æ–º
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º mint —Å –ø–æ–¥–ø–∏—Å—å—é owner, —Ç–∞–∫ –∫–∞–∫ –¥—Ä—É–≥–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã –º–æ–≥—É—Ç –Ω–µ –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ mint
                const [owner] = await ethers.getSigners();
                // –ú–∏–Ω—Ç–∏–º –≤ 100 —Ä–∞–∑ –±–æ–ª—å—à–µ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞
                const largeAmount = amount * 100n;
                await tokenContract.connect(owner).mint(account.address, largeAmount);
                console.log(`   ‚úÖ Minted ${largeAmount} tokens with large buffer`);
            } catch (mintError) {
                console.error(`   ‚ùå All mint attempts failed: ${mintError}`);
                throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ ${tokenSymbol}: ${mintError}`);
            }
        }

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        const balanceAfterMint = await tokenContract.balanceOf(account.address);
        console.log(`   üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${balanceAfterMint}`);
        if (balanceAfterMint < amount) {
            throw new Error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ø–æ—Å–ª–µ mint –±–∞–ª–∞–Ω—Å ${balanceAfterMint} –≤—Å–µ –µ—â–µ –º–µ–Ω—å—à–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ ${amount}`);
        }

        // 4. –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ whitelist
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞
            const isWhitelisted = await tokenValidator.isValidToken(await tokenContract.getAddress());
            const isStablecoin = await tokenValidator.isStablecoin?.(await tokenContract.getAddress()).catch(() => false);
            console.log(`   üîç –¢–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π: isWhitelisted=${isWhitelisted}, isStablecoin=${isStablecoin}`);

            if (!isWhitelisted) {
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ whitelist
                const [owner] = await ethers.getSigners();
                await tokenValidator.connect(owner).setTokenWhitelist(
                    await tokenContract.getAddress(),
                    true,
                    `${tokenSymbol} token for tests`
                );
                console.log(`   ‚úÖ –¢–æ–∫–µ–Ω ${tokenSymbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ whitelist`);
            }

            // –°—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–∏–º–≤–æ–ª—É
            const stablecoinSymbols = ['USDT', 'USDC', 'BUSD', 'DAI', 'TUSD'];
            const isStablecoinBySymbol = stablecoinSymbols.includes(tokenSymbol) || tokenSymbol.startsWith('USD');

            if (isStablecoinBySymbol && !isStablecoin) {
                console.log(`   ‚ö†Ô∏è –¢–æ–∫–µ–Ω ${tokenSymbol} –ø–æ—Ö–æ–∂ –Ω–∞ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω, –Ω–æ –Ω–µ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω`);

                // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤
                const [owner] = await ethers.getSigners();

                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞ updateTokenInfo
                    if (typeof tokenValidator.updateTokenInfo === 'function') {
                        console.log(`   üîÑ –í—ã–∑—ã–≤–∞–µ–º updateTokenInfo –¥–ª—è ${tokenSymbol}...`);
                        await tokenValidator.connect(owner).updateTokenInfo(await tokenContract.getAddress());
                    }
                } catch (updateError) {
                    console.log(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ: ${updateError}`);
                }

                // –ü—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –¥–æ–±–∞–≤–∏—Ç—å –≤ whitelist –µ—â–µ —Ä–∞–∑ —Å –ø–æ–º–µ—Ç–∫–æ–π stablecoin
                try {
                    await tokenValidator.connect(owner).setTokenWhitelist(
                        await tokenContract.getAddress(),
                        true,
                        `${tokenSymbol} STABLECOIN for tests`
                    );
                    console.log(`   ‚úÖ –¢–æ–∫–µ–Ω ${tokenSymbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ whitelist –∫–∞–∫ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω`);
                } catch (whitelistError) {
                    console.log(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å whitelist: ${whitelistError}`);
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                const isValidNow = await tokenValidator.isValidToken(await tokenContract.getAddress());
                const isStablecoinNow = await tokenValidator.isStablecoin?.(await tokenContract.getAddress()).catch(() => false);
                console.log(`   üîç –¢–æ–∫–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: isValid=${isValidNow}, isStablecoin=${isStablecoinNow}`);
            }
        } catch (validationError) {
            console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: ${validationError}`);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
        }

        // 5. –î–µ–ª–∞–µ–º approve —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º –∑–∞–ø–∞—Å–æ–º
        const currentAllowance = await tokenContract.allowance(account.address, spender);
        console.log(`   üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${await tokenContract.balanceOf(account.address)}, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ: ${amount}`);
        console.log(`   üîì –¢–µ–∫—É—â–∏–π allowance: ${currentAllowance}, –∞–¥—Ä–µ—Å spender: ${spender}`);

        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –±–æ–ª—å—à–∏–º –∑–∞–ø–∞—Å–æ–º (–≤ 100 —Ä–∞–∑ –±–æ–ª—å—à–µ)
            const approveAmount = amount * BigInt(100);
            console.log(`   üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π allowance: ${approveAmount}`);

            // –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ —Å–±—Ä–æ—Å –∫ 0 –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º
            try {
                await tokenContract.connect(account).approve(spender, 0);
                console.log(`   ‚úÖ –°–±—Ä–æ—Å allowance –∫ 0 –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
            } catch (resetError) {
                console.log(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å allowance: ${resetError}`);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            }

            const approveTx = await tokenContract.connect(account).approve(spender, approveAmount);
            const receipt = await approveTx.wait();
            console.log(`   ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è approve –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: ${receipt?.hash || '–Ω–µ—Ç —Ö–µ—à–∞'}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π allowance
            const newAllowance = await tokenContract.allowance(account.address, spender);
            console.log(`   ‚úÖ –ù–æ–≤—ã–π allowance: ${newAllowance} –¥–ª—è ${spender}`);

            if (newAllowance < amount) {
                throw new Error(`Allowance ${newAllowance} –º–µ–Ω—å—à–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ ${amount}`);
            }
        } catch (approveError) {
            console.error(`   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ allowance: ${approveError}`);
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å allowance –¥–ª—è ${tokenSymbol}: ${approveError}`);
        }

        console.log(`‚úÖ ERC20 —Ç–æ–∫–µ–Ω ${tokenSymbol} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–ª—è ${account.address}`);

    } catch (error) {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω: ${error}`);
        throw error;
    }
}

/**
 * ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ë—ã—Å—Ç—Ä–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
 * @param mockTokens –û–±—ä–µ–∫—Ç —Å mock —Ç–æ–∫–µ–Ω–∞–º–∏  
 * @param tokenValidator –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤
 * @param accounts –ê–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
 * @param spender –ê–¥—Ä–µ—Å –¥–ª—è approve
 */
export async function prepareAllTokensForAccounts(
    mockTokens: { mockUSDC: any, mockUSDT: any, mockWETH: any },
    tokenValidator: any,
    accounts: any[],
    spender: string
): Promise<void> {
    console.log(`üöÄ Preparing all tokens for ${accounts.length} accounts...`);
    
    const tokens = [mockTokens.mockUSDC, mockTokens.mockUSDT, mockTokens.mockWETH];
    const largeAmount = ethers.parseUnits("10000000", 18); // 10M —Ç–æ–∫–µ–Ω–æ–≤
    
    for (const token of tokens) {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ whitelist
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ whitelist
            const isAlreadyValid = await tokenValidator.isValidToken(await token.getAddress())
                .catch(() => false);

            if (!isAlreadyValid) {
                await tokenValidator.setTokenWhitelist(
                    await token.getAddress(),
                    true,
                    "Bulk preparation for tests"
                );
            }
        } catch (error) {
            console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ whitelist: ${error}`);
        }
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        for (const account of accounts) {
            try {
                await token.mint(account.address, largeAmount);
                await token.connect(account).approve(spender, largeAmount);
            } catch (error) {
                console.log(`‚ö†Ô∏è Warning: Could not prepare ${await token.symbol()} for ${account.address}`);
            }
        }
    }
    
    console.log(`‚úÖ All tokens prepared successfully!`);
}

// ==========================================
// üìä –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ë–ê–õ–ê–ù–°–û–í
// ==========================================

/**
 * ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å ETH —É –∞–∫–∫–∞—É–Ω—Ç–∞
 * @param account –ê–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param expectedMin –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å
 */
export async function expectETHBalance(
    account: any,
    expectedMin: bigint
): Promise<void> {
    const balance = await ethers.provider.getBalance(account.address);
    expect(balance).to.be.at.least(expectedMin);
}

/**
 * ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å ERC20 —Ç–æ–∫–µ–Ω–∞ —É –∞–∫–∫–∞—É–Ω—Ç–∞
 * @param tokenContract –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞
 * @param account –ê–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param expectedAmount –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å
 */
export async function expectTokenBalance(
    tokenContract: any,
    account: any,
    expectedAmount: bigint
): Promise<void> {
    const balance = await tokenContract.balanceOf(account.address);
    expect(balance).to.equal(expectedAmount);
}

/**
 * ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ETH –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * @param account –ê–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param transaction –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * @param expectedChange –û–∂–∏–¥–∞–µ–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º)
 */
export async function expectETHBalanceChange(
    account: any,
    transaction: () => Promise<any>,
    expectedChange: bigint
): Promise<void> {
    const balanceBefore = await ethers.provider.getBalance(account.address);
    
    const tx = await transaction();
    const receipt = await tx.wait();
    
    const balanceAfter = await ethers.provider.getBalance(account.address);
    
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è gas costs
    if (tx.from.toLowerCase() === account.address.toLowerCase()) {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º gasUsed –∏ gasPrice –≤ bigint
        const gasUsed = BigInt(receipt!.gasUsed.toString());
        const gasPrice = BigInt(receipt!.gasPrice.toString());
        const gasCost = gasUsed * gasPrice;
        
        const actualChange = balanceAfter - balanceBefore + gasCost;
        expect(actualChange).to.equal(expectedChange);
    } else {
        const actualChange = balanceAfter - balanceBefore;
        expect(actualChange).to.equal(expectedChange);
    }
}

/**
 * ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ERC20 —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * @param tokenContract –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞
 * @param account –ê–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param transaction –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * @param expectedChange –û–∂–∏–¥–∞–µ–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
 */
export async function expectTokenBalanceChange(
    tokenContract: any,
    account: any,
    transaction: () => Promise<any>,
    expectedChange: bigint
): Promise<void> {
    const balanceBefore = await tokenContract.balanceOf(account.address);
    
    await transaction();
    
    const balanceAfter = await tokenContract.balanceOf(account.address);
    const actualChange = balanceAfter - balanceBefore;
    
    expect(actualChange).to.equal(expectedChange);
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
// ==========================================
// üîß –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –¢–û–ö–ï–ù–ê–ú–ò
// ==========================================

/**
 * ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–∫–µ–Ω —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–º —á–µ—Ä–µ–∑ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
 * @param tokenContract –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞
 * @param tokenValidator –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤
 */
export async function isStablecoin(
    tokenContract: any,
    tokenValidator: any
): Promise<boolean> {
    try {
        const tokenAddress = await tokenContract.getAddress();
        return await tokenValidator.isStablecoin(tokenAddress);
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–∞: ${error}`);

        // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ getTokenInfo
        try {
            const tokenAddress = await tokenContract.getAddress();
            const tokenInfo = await tokenValidator.getTokenInfo(tokenAddress);
            return tokenInfo.isStablecoin;
        } catch (infoError) {
            console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ getTokenInfo: ${infoError}`);
            return false;
        }
    }
}

/**
 * ‚úÖ –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–∏–º–≤–æ–ª, decimals)
 * @param tokenContract –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞
 */
export async function getTokenInfo(tokenContract: any): Promise<{
    name: string;
    symbol: string;
    decimals: number;
    address: string;
}> {
    const [name, symbol, decimals, address] = await Promise.all([
        tokenContract.name(),
        tokenContract.symbol(),
        tokenContract.decimals(),
        tokenContract.getAddress()
    ]);

    return { name, symbol, decimals, address };
}

/**
 * ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º decimals —Ç–æ–∫–µ–Ω–∞
 * @param amount –°—É–º–º–∞ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö
 * @param decimals –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ decimals
 */
export function toTokenUnits(amount: number, decimals: number): bigint {
    return BigInt(amount) * BigInt(10 ** decimals);
}

/**
 * ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –∏–∑ —Ç–æ–∫–µ–Ω units –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
 * @param amount –°—É–º–º–∞ –≤ —Ç–æ–∫–µ–Ω units
 * @param decimals –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ decimals
 */
export function fromTokenUnits(amount: bigint, decimals: number): number {
    return Number(amount) / (10 ** decimals);
}

/**
 * ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–∞–ª–∞–Ω—Å –¥–ª—è —á–∏—Ç–∞–µ–º–æ–≥–æ –≤—ã–≤–æ–¥–∞
 * @param tokenContract –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞
 * @param account –ê–∫–∫–∞—É–Ω—Ç
 */
export async function formatBalance(
    tokenContract: any,
    account: any
): Promise<string> {
    const balance = await tokenContract.balanceOf(account.address);
    const decimals = await tokenContract.decimals();
    const symbol = await tokenContract.symbol();
    
    const readable = fromTokenUnits(balance, decimals);
    return `${readable} ${symbol}`;
}

// ==========================================
// üß™ MOCK –¢–û–ö–ï–ù–´ –î–õ–Ø –¢–ï–°–¢–û–í
// ==========================================

/**
 * ‚úÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç mock —Ç–æ–∫–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 * @param mockTokens –û–±—ä–µ–∫—Ç —Å mock —Ç–æ–∫–µ–Ω–∞–º–∏
 * @param tokenValidator –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤
 * @param accounts –ú–∞—Å—Å–∏–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
 * @param amount –°—É–º–º–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
 */
export async function setupMockTokensForAccounts(
    mockTokens: MockTokens,
    tokenValidator: any,
    accounts: any[],
    amount: bigint = toTokenUnits(1000000, 18) // 1M —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
): Promise<void> {
    const tokens = [mockTokens.usdc, mockTokens.usdt, mockTokens.weth];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –≤ whitelist
    for (const token of tokens) {
        const tokenAddress = await token.getAddress();
        const isAlreadyValid = await tokenValidator.isValidToken(tokenAddress)
            .catch(() => false);

        if (!isAlreadyValid) {
            try {
                await tokenValidator.setTokenWhitelist(
                    tokenAddress,
                    true,
                    "Mock token for tests"
                );
                console.log(`Token ${await token.symbol()} added to whitelist`);
            } catch (error) {
                console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å ${await token.symbol()} –≤ whitelist: ${error}`);
            }
        } else {
            console.log(`Token ${await token.symbol()} is already valid`);
        }
    }
    
    // –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    for (const account of accounts) {
        for (const token of tokens) {
            const decimals = await token.decimals();
            const tokenAmount = decimals === 6 ? 
                toTokenUnits(1000000, 6) : // 1M –¥–ª—è USDC/USDT
                amount; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
                
            await setupTokenBalance(token, account, tokenAmount);
        }
    }
    
    console.log(`‚úÖ Setup complete for ${accounts.length} accounts with ${tokens.length} tokens`);
}

/**
 * ‚úÖ –°–æ–∑–¥–∞–µ—Ç –Ω–∞–±–æ—Ä –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export const BALANCE_SCENARIOS = {
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    MINIMAL: {
        usdc: toTokenUnits(1000, 6),      // 1,000 USDC
        usdt: toTokenUnits(1000, 6),      // 1,000 USDT
        weth: toTokenUnits(1, 18),        // 1 WETH
        eth: ethers.parseEther("10")      // 10 ETH
    },

    // –°—Ä–µ–¥–Ω–∏–µ –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Ç–µ—Å—Ç–æ–≤
    STANDARD: {
        usdc: toTokenUnits(100000, 6),    // 100,000 USDC
        usdt: toTokenUnits(100000, 6),    // 100,000 USDT
        weth: toTokenUnits(50, 18),       // 50 WETH
        eth: ethers.parseEther("100")     // 100 ETH
    },

    // –ë–æ–ª—å—à–∏–µ –±–∞–ª–∞–Ω—Å—ã –¥–ª—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–≤
    LARGE: {
        usdc: toTokenUnits(10000000, 6),  // 10M USDC
        usdt: toTokenUnits(10000000, 6),  // 10M USDT
        weth: toTokenUnits(5000, 18),     // 5,000 WETH
        eth: ethers.parseEther("10000")   // 10,000 ETH
    }
};