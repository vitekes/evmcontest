// ==========================================
// üí∞ –•–ï–õ–ü–ï–†–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–£–ú–ú–ê–ú–ò –¢–û–ö–ï–ù–û–í
// ==========================================

import { ethers } from "hardhat";

/**
 * ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º decimals —Ç–æ–∫–µ–Ω–∞
 * @param amount –°—É–º–º–∞ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö
 * @param decimals –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ decimals
 * @returns –°—É–º–º–∞ –≤ —Ç–æ–∫–µ–Ω-—é–Ω–∏—Ç–∞—Ö (wei, satoshi –∏ —Ç.–¥.)
 */
export function toTokenUnits(amount: number, decimals: number): bigint {
    if (amount < 0) {
        throw new Error("Amount cannot be negative");
    }
    return BigInt(Math.floor(amount * 10 ** decimals));
}

/**
 * ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –∏–∑ —Ç–æ–∫–µ–Ω units –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
 * @param amount –°—É–º–º–∞ –≤ —Ç–æ–∫–µ–Ω units
 * @param decimals –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ decimals
 * @returns –°—É–º–º–∞ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, ETH –≤–º–µ—Å—Ç–æ wei)
 */
export function fromTokenUnits(amount: bigint, decimals: number): number {
    const divisor = 10 ** decimals;
    return Number(amount) / divisor;
}

/**
 * ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
 * @param amount –°—É–º–º–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param decimals –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ decimals —Ç–æ–∫–µ–Ω–∞
 * @param displayDecimals –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
 * @returns –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
 */
export function formatTokenAmount(amount: bigint, decimals: number, displayDecimals: number = 2): string {
    const value = fromTokenUnits(amount, decimals);
    return value.toFixed(displayDecimals);
}

/**
 * ‚úÖ –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 * @param tokenContract –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞
 * @returns –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–∫–µ–Ω–µ
 */
export async function getTokenInfo(tokenContract: any) {
    const [name, symbol, decimals, address] = await Promise.all([
        tokenContract.name(),
        tokenContract.symbol(),
        tokenContract.decimals(),
        tokenContract.getAddress()
    ]);

    return { name, symbol, decimals, address };
}
