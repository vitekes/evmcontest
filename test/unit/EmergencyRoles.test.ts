import { expect } from "chai";
import { ethers } from "hardhat";
import { ContestEscrow, NetworkFeeManager } from "../../typechain-types";
import { SignerWithAddress } from "@nomicfoundation/hardhat-ethers/signers";
import { time } from "@nomicfoundation/hardhat-network-helpers";

describe("Emergency Roles Unit Tests", function () {
    let escrow: ContestEscrow;
    let feeManager: NetworkFeeManager;
    
    let admin: SignerWithAddress;
    let creator: SignerWithAddress;
    let jury: SignerWithAddress;
    let treasury: SignerWithAddress;
    let emergencyUser1: SignerWithAddress;
    let emergencyUser2: SignerWithAddress;
    let maliciousUser: SignerWithAddress;

    const EMERGENCY_ROLE = ethers.keccak256(ethers.toUtf8Bytes("EMERGENCY_ROLE"));
    const JURY_ROLE = ethers.keccak256(ethers.toUtf8Bytes("JURY_ROLE"));
    const DEFAULT_ADMIN_ROLE = ethers.ZeroHash;

    beforeEach(async function () {
        [admin, creator, jury, treasury, emergencyUser1, emergencyUser2, maliciousUser] = await ethers.getSigners();

        // Deploy NetworkFeeManager
        const NetworkFeeManagerFactory = await ethers.getContractFactory("NetworkFeeManager");
        feeManager = await NetworkFeeManagerFactory.deploy(treasury.address);

        // Deploy ContestEscrow
        const ContestEscrowFactory = await ethers.getContractFactory("ContestEscrow");
        escrow = await ContestEscrowFactory.deploy();

        // Initialize escrow with test contest
        const contestParams = {
            creator: creator.address,
            token: ethers.ZeroAddress, // ETH
            totalPrize: ethers.parseEther("1.0"),
            distribution: [{
                place: 1,
                percentage: 10000, // 100%
                description: "Winner Takes All"
            }],
            jury: [jury.address],
            treasury: treasury.address,
            contestId: 1,
            startTime: await time.latest() + 3600,
            endTime: await time.latest() + 86400,
            metadata: "Test contest"
        };

        await escrow.init(contestParams, { value: ethers.parseEther("1.0") });
    });

    describe("üõ°Ô∏è Role Hierarchy and Permissions", function () {
        it("‚úÖ Should properly set initial roles", async function () {
            // Check admin role for creator (creator gets DEFAULT_ADMIN_ROLE)
            expect(await escrow.hasRole(DEFAULT_ADMIN_ROLE, creator.address)).to.be.true;
            
            // Check jury role
            expect(await escrow.hasRole(JURY_ROLE, jury.address)).to.be.true;
            
            // Check emergency role for factory
            // –í —Ç–µ—Å—Ç–µ admin –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–º–µ—Å—Ç–æ factory
            expect(await escrow.hasEmergencyRole(admin.address)).to.be.true;
        });

        it("‚úÖ Should allow admin to grant emergency roles", async function () {
            await expect(
                escrow.connect(creator).grantRole(EMERGENCY_ROLE, emergencyUser1.address)
            ).to.emit(escrow, "RoleGranted")
             .withArgs(EMERGENCY_ROLE, emergencyUser1.address, creator.address);

            expect(await escrow.hasEmergencyRole(emergencyUser1.address)).to.be.true;
        });

        it("‚ùå Should prevent non-admin from granting emergency roles", async function () {
            await expect(
                escrow.connect(jury).grantRole(EMERGENCY_ROLE, emergencyUser1.address)
            ).to.be.reverted;

            await expect(
                escrow.connect(maliciousUser).grantRole(EMERGENCY_ROLE, emergencyUser1.address)
            ).to.be.reverted;
        });

        it("‚úÖ Should allow admin to revoke emergency roles", async function () {
            // First grant the role
            await escrow.connect(creator).grantRole(EMERGENCY_ROLE, emergencyUser1.address);
            expect(await escrow.hasEmergencyRole(emergencyUser1.address)).to.be.true;

            // Then revoke it
            await expect(
                escrow.connect(creator).revokeRole(EMERGENCY_ROLE, emergencyUser1.address)
            ).to.emit(escrow, "RoleRevoked")
             .withArgs(EMERGENCY_ROLE, emergencyUser1.address, creator.address);

            expect(await escrow.hasEmergencyRole(emergencyUser1.address)).to.be.false;
        });

        it("‚úÖ Should allow revoking and re-granting roles", async function () {
            // –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–æ–∑–≤–∞—Ç—å –∏ –∑–∞—Ç–µ–º –≤–µ—Ä–Ω—É—Ç—å —Ä–æ–ª—å
            await escrow.connect(creator).grantRole(EMERGENCY_ROLE, emergencyUser1.address);
            expect(await escrow.hasEmergencyRole(emergencyUser1.address)).to.be.true;
            
            await escrow.connect(creator).revokeRole(EMERGENCY_ROLE, emergencyUser1.address);
            expect(await escrow.hasEmergencyRole(emergencyUser1.address)).to.be.false;
            
            // –ú–æ–∂–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å
            await escrow.connect(creator).grantRole(EMERGENCY_ROLE, emergencyUser1.address);
            expect(await escrow.hasEmergencyRole(emergencyUser1.address)).to.be.true;
        });
    });

    describe("‚è∞ Emergency Operations", function () {
        beforeEach(async function () {
            // Grant emergency role to test user
            await escrow.connect(creator).grantRole(EMERGENCY_ROLE, emergencyUser1.address);
            
            // –¢–µ–ø–µ—Ä—å emergencyWithdraw() –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ factory (–≤ –Ω–∞—à–µ–º —Ç–µ—Å—Ç–µ - admin)
            // —Ç–∞–∫ –∫–∞–∫ –≤ ContestEscrow –µ—Å—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä onlyFactory
        });

        it("‚úÖ Should allow emergency withdrawal by factory", async function () {
            // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞
            const contestInfo = await escrow.getContestInfo();
            const endTime = contestInfo[3]; // endTime is 4th element
            await time.increaseTo(Number(endTime) + 1);
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
            await expect(
                escrow.connect(admin).emergencyWithdraw("Valid emergency")
            ).to.emit(escrow, "EmergencyWithdrawal");
        });

        it("‚ùå Should prevent unauthorized emergency withdrawals", async function () {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å emergency —Ä–æ–ª—å—é –Ω–µ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å emergencyWithdraw –Ω–∞–ø—Ä—è–º—É—é
            // –∏–∑-–∑–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ onlyFactory
            await expect(
                escrow.connect(emergencyUser1).emergencyWithdraw("Unauthorized")
            ).to.be.revertedWith("Only factory can call this");
        });

        it("‚úÖ Should handle multiple emergency roles correctly", async function () {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å emergency —Ä–æ–ª—å—é
            await escrow.connect(creator).grantRole(EMERGENCY_ROLE, emergencyUser2.address);
            
            expect(await escrow.hasEmergencyRole(emergencyUser1.address)).to.be.true;
            expect(await escrow.hasEmergencyRole(emergencyUser2.address)).to.be.true;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–µ —Ä–æ–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã
            const canEmergency1 = await escrow.hasEmergencyRole(emergencyUser1.address);
            const canEmergency2 = await escrow.hasEmergencyRole(emergencyUser2.address);
            
            expect(canEmergency1 && canEmergency2).to.be.true;
        });
    });

    describe("üîÑ Role Renunciation", function () {
        it("‚úÖ Should allow role renunciation", async function () {
            await escrow.connect(creator).grantRole(EMERGENCY_ROLE, emergencyUser1.address);
            
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Å–≤–æ–µ–π —Ä–æ–ª–∏
            await expect(
                escrow.connect(emergencyUser1).renounceRole(EMERGENCY_ROLE, emergencyUser1.address)
            ).to.emit(escrow, "RoleRevoked")
             .withArgs(EMERGENCY_ROLE, emergencyUser1.address, emergencyUser1.address);

            expect(await escrow.hasEmergencyRole(emergencyUser1.address)).to.be.false;
        });

        it("‚ùå Should prevent renouncing others' roles", async function () {
            await escrow.connect(creator).grantRole(EMERGENCY_ROLE, emergencyUser1.address);
            
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —á—É–∂–æ–π —Ä–æ–ª–∏
            await expect(
                escrow.connect(emergencyUser1).renounceRole(EMERGENCY_ROLE, emergencyUser2.address)
            ).to.be.reverted;
        });
    });

    describe("üõ°Ô∏è Role Security", function () {
        it("‚ùå Should prevent role escalation attacks", async function () {
            // –í—ã–¥–∞–µ–º emergency —Ä–æ–ª—å
            await escrow.connect(creator).grantRole(EMERGENCY_ROLE, emergencyUser1.address);
            
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å emergency —Ä–æ–ª—å—é –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–¥–∞–≤–∞—Ç—å admin —Ä–æ–ª–∏
            await expect(
                escrow.connect(emergencyUser1).grantRole(DEFAULT_ADMIN_ROLE, maliciousUser.address)
            ).to.be.reverted;
        });

        it("üîí Should maintain role integrity across operations", async function () {
            // –í—ã–¥–∞–µ–º —Ä–æ–ª—å
            await escrow.connect(creator).grantRole(EMERGENCY_ROLE, emergencyUser1.address);
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –¥—Ä—É–≥–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            await time.increase(1000);
            
            // –†–æ–ª—å –¥–æ–ª–∂–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è
            expect(await escrow.hasEmergencyRole(emergencyUser1.address)).to.be.true;
            
            // –û—Ç–∑—ã–≤–∞–µ–º —Ä–æ–ª—å
            await escrow.connect(creator).revokeRole(EMERGENCY_ROLE, emergencyUser1.address);
            
            // –†–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–æ–∑–≤–∞–Ω–∞
            expect(await escrow.hasEmergencyRole(emergencyUser1.address)).to.be.false;
        });
    });
});